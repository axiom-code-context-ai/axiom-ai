version: '3.8'

services:
  # Database Services
  postgres:
    image: ankane/pgvector:latest
    container_name: axiom-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-axiom}
      POSTGRES_USER: ${DB_USER:-axiom}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-axiom} -d ${DB_NAME:-axiom}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - axiom-network

  redis:
    image: redis:7-alpine
    container_name: axiom-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - axiom-network

  # Application Services
  web-portal:
    build: 
      context: ./services/web-portal
      dockerfile: Dockerfile
    container_name: axiom-web-portal
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    ports:
      - "${WEB_PORTAL_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ${REPO_STORAGE_PATH:-./data/repos}:/data/repos
      - ${LOG_STORAGE_PATH:-./data/logs}:/data/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - axiom-network

  mcp-server:
    build:
      context: ./services/mcp-server
      dockerfile: Dockerfile
    container_name: axiom-mcp-server
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      AZURE_OPENAI_KEY: ${AZURE_OPENAI_KEY}
      SEARCH_API_URL: http://search-api:4000
      SECURITY_API_URL: http://security-scanner:4002
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${MCP_SERVER_PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      search-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - axiom-network

  search-api:
    build:
      context: ./services/search-api
      dockerfile: Dockerfile
    container_name: axiom-search-api
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SEARCH_CACHE_TTL: ${SEARCH_CACHE_TTL:-3600}
      MAX_SEARCH_RESULTS: ${MAX_SEARCH_RESULTS:-100}
      VECTOR_SIMILARITY_THRESHOLD: ${VECTOR_SIMILARITY_THRESHOLD:-0.7}
    ports:
      - "${SEARCH_API_PORT:-4000}:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - axiom-network

  crawler-agent:
    build:
      context: ./services/crawler-agent
      dockerfile: Dockerfile
    container_name: axiom-crawler-agent
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITLAB_TOKEN: ${GITLAB_TOKEN}
      BITBUCKET_USERNAME: ${BITBUCKET_USERNAME}
      BITBUCKET_APP_PASSWORD: ${BITBUCKET_APP_PASSWORD}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      MAX_REPO_SIZE: ${MAX_REPO_SIZE:-1073741824}
      QUEUE_CONCURRENCY: ${QUEUE_CONCURRENCY:-5}
      EMBEDDING_API_URL: http://embedding-generator:4003
    ports:
      - "${CRAWLER_AGENT_PORT:-4001}:4001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      embedding-generator:
        condition: service_healthy
    volumes:
      - ${REPO_STORAGE_PATH:-./data/repos}:/data/repos
      - ~/.ssh:/root/.ssh:ro
      - ~/.gitconfig:/root/.gitconfig:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - axiom-network

  security-scanner:
    build:
      context: ./services/security-scanner
      dockerfile: Dockerfile
    container_name: axiom-security-scanner
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      NVD_API_KEY: ${NVD_API_KEY}
      GITHUB_SECURITY_TOKEN: ${GITHUB_SECURITY_TOKEN}
    ports:
      - "${SECURITY_SCANNER_PORT:-4002}:4002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ${REPO_STORAGE_PATH:-./data/repos}:/data/repos:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - axiom-network

  embedding-generator:
    build:
      context: ./services/embedding-generator
      dockerfile: Dockerfile
    container_name: axiom-embedding-generator
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      EMBEDDING_BATCH_SIZE: ${EMBEDDING_BATCH_SIZE:-100}
    ports:
      - "${EMBEDDING_GENERATOR_PORT:-4003}:4003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - axiom-network

  # Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: axiom-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web-portal
      - mcp-server
      - search-api
    networks:
      - axiom-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  axiom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
