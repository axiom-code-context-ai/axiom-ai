services:
  # Database Services
  postgres:
    image: ankane/pgvector:latest
    container_name: axiom-postgres
    environment:
      POSTGRES_DB: axiom
      POSTGRES_USER: axiom
      POSTGRES_PASSWORD: axiom_secure_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/01-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U axiom -d axiom"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - axiom-network

  redis:
    image: redis:7-alpine
    container_name: axiom-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - axiom-network

  # Application Services
  web-portal:
    build: 
      context: ./services/web-portal
      dockerfile: Dockerfile
    container_name: axiom-web-portal
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://axiom:axiom_secure_password_2024@postgres:5432/axiom
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-nextauth-secret-here}
      NEXTAUTH_URL: http://localhost:3000
      SEARCH_API_URL: http://search-api:4000
      MCP_SERVER_URL: http://mcp-server:18000
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./data/repos:/data/repos
      - ./data/logs:/data/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - axiom-network

  search-api:
    build:
      context: ./services/search-api
      dockerfile: Dockerfile
    container_name: axiom-search-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://axiom:axiom_secure_password_2024@postgres:5432/axiom
      REDIS_URL: redis://redis:6379
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: axiom
      DB_USER: axiom
      DB_PASSWORD: axiom_secure_password_2024
      REDIS_HOST: redis
      REDIS_PORT: 6379
      API_KEY_SECRET: ${API_KEY_SECRET:-your-api-key-secret-here}
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - axiom-network

  crawler-agent:
    build:
      context: ./services/crawler-agent
      dockerfile: Dockerfile
    container_name: axiom-crawler-agent
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://axiom:axiom_secure_password_2024@postgres:5432/axiom
      REDIS_URL: redis://redis:6379
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: axiom
      DB_USER: axiom
      DB_PASSWORD: axiom_secure_password_2024
      REDIS_HOST: redis
      REDIS_PORT: 6379
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-encryption-key-here}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    ports:
      - "5001:4001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./data/repos:/data/repos
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - axiom-network


  # MCP Server (for IDE integration)
  mcp-server:
    build:
      context: ./services/mcp-server
      dockerfile: Dockerfile
    container_name: axiom-mcp-server
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: axiom
      DB_USER: axiom
      DB_PASSWORD: axiom_secure_password_2024
      SEARCH_API_URL: http://search-api:4000
      SEARCH_API_KEY: ${API_KEY_SECRET:-your-api-key-secret-here}
      MCP_API_KEY: ${MCP_API_KEY:-your-mcp-api-key-here}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    ports:
      - "18001:18000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      search-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:18000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - axiom-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  axiom-network:
    driver: bridge
