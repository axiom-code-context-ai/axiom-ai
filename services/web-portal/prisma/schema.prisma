// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp"), vector, pg_trgm, pgcrypto]
}

// ============================================================================
// CORE SCHEMA - Main business entities
// ============================================================================

model Enterprise {
  id                String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String      @db.VarChar(255)
  slug              String      @unique @db.VarChar(100)
  settings          Json        @default("{}")
  subscriptionTier  String      @default("free") @map("subscription_tier") @db.VarChar(50)
  maxWorkspaces     Int         @default(5) @map("max_workspaces")
  maxRepositories   Int         @default(100) @map("max_repositories")
  createdAt         DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  workspaces        Workspace[]

  @@map("enterprises")
  @@schema("core")
}

model Workspace {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  enterpriseId String    @map("enterprise_id") @db.Uuid
  name         String    @db.VarChar(255)
  slug         String    @db.VarChar(100)
  description  String?
  settings     Json      @default("{}")
  llmConfig    Json      @default("{}") @map("llm_config")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  members      WorkspaceMember[]
  repositories Repository[]
  mcpTokens    McpToken[]

  @@unique([enterpriseId, slug])
  @@map("workspaces")
  @@schema("core")
}

model User {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email       String    @unique @db.VarChar(255)
  name        String    @db.VarChar(255)
  avatarUrl   String?   @map("avatar_url") @db.VarChar(500)
  passwordHash String?  @map("password_hash") @db.VarChar(255)
  provider    String    @default("local") @db.VarChar(50)
  providerId  String?   @map("provider_id") @db.VarChar(255)
  role        String    @default("developer") @db.VarChar(50)
  isActive    Boolean   @default(true) @map("is_active")
  lastLoginAt DateTime? @map("last_login_at") @db.Timestamptz(6)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  workspaces  WorkspaceMember[]
  mcpTokens   McpToken[]
  auditLogs   AuditLog[]

  @@map("users")
  @@schema("core")
}

model WorkspaceMember {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  workspaceId String   @map("workspace_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  role        String   @default("developer") @db.VarChar(50)
  permissions Json     @default("{}")
  joinedAt    DateTime @default(now()) @map("joined_at") @db.Timestamptz(6)

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
  @@schema("core")
}

model Repository {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  workspaceId    String    @map("workspace_id") @db.Uuid
  name           String    @db.VarChar(255)
  url            String    @db.VarChar(500)
  branch         String    @default("main") @db.VarChar(100)
  authType       String    @map("auth_type") @db.VarChar(50)
  authConfig     Json      @map("auth_config")
  localPath      String?   @map("local_path") @db.VarChar(500)
  lastSyncAt     DateTime? @map("last_sync_at") @db.Timestamptz(6)
  lastCommitHash String?   @map("last_commit_hash") @db.VarChar(40)
  syncStatus     String    @default("pending") @map("sync_status") @db.VarChar(50)
  syncError      String?   @map("sync_error")
  fileCount      Int       @default(0) @map("file_count")
  totalSize      BigInt    @default(0) @map("total_size")
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  codePatterns   CodePattern[]
  securityScans  SecurityScan[]

  @@unique([workspaceId, url])
  @@map("repositories")
  @@schema("core")
}

model McpToken {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  workspaceId String    @map("workspace_id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  name        String    @db.VarChar(255)
  tokenHash   String    @map("token_hash") @db.VarChar(255)
  permissions Json      @default("{}")
  lastUsedAt  DateTime? @map("last_used_at") @db.Timestamptz(6)
  expiresAt   DateTime? @map("expires_at") @db.Timestamptz(6)
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mcp_tokens")
  @@schema("core")
}

// ============================================================================
// VECTOR SCHEMA - Embeddings and search data
// ============================================================================

model CodePattern {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  repositoryId    String    @map("repository_id") @db.Uuid
  filePath        String    @map("file_path")
  fileType        String?   @map("file_type") @db.VarChar(50)
  language        String?   @db.VarChar(50)
  functionName    String?   @map("function_name") @db.VarChar(255)
  className       String?   @map("class_name") @db.VarChar(255)
  codeSnippet     String    @map("code_snippet")
  fullContent     String?   @map("full_content")
  lineStart       Int?      @map("line_start")
  lineEnd         Int?      @map("line_end")
  patternType     String?   @map("pattern_type") @db.VarChar(50)
  complexityScore Float?    @map("complexity_score")
  embedding       Unsupported("vector(1536)")?
  metadata        Json      @default("{}")
  commitHash      String?   @map("commit_hash") @db.VarChar(40)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("code_patterns")
  @@schema("vector")
}

model SearchCache {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  queryHash   String   @map("query_hash") @db.VarChar(64)
  workspaceId String   @map("workspace_id") @db.Uuid
  queryText   String   @map("query_text")
  results     Json
  resultCount Int      @map("result_count")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt   DateTime @map("expires_at") @db.Timestamptz(6)

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("search_cache")
  @@schema("vector")
}

// ============================================================================
// AUDIT SCHEMA - Logging and compliance
// ============================================================================

model AuditLog {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  workspaceId  String?   @map("workspace_id") @db.Uuid
  userId       String?   @map("user_id") @db.Uuid
  action       String    @db.VarChar(100)
  resourceType String    @map("resource_type") @db.VarChar(50)
  resourceId   String?   @map("resource_id") @db.Uuid
  details      Json      @default("{}")
  ipAddress    String?   @map("ip_address") @db.Inet
  userAgent    String?   @map("user_agent")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  workspace    Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user         User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("logs")
  @@schema("audit")
}

model SecurityScan {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  repositoryId String    @map("repository_id") @db.Uuid
  scanType     String    @map("scan_type") @db.VarChar(50)
  severity     String    @db.VarChar(20)
  title        String    @db.VarChar(255)
  description  String?
  filePath     String?   @map("file_path")
  lineNumber   Int?      @map("line_number")
  ruleId       String?   @map("rule_id") @db.VarChar(100)
  cweId        String?   @map("cwe_id") @db.VarChar(20)
  cveId        String?   @map("cve_id") @db.VarChar(20)
  remediation  String?
  status       String    @default("open") @db.VarChar(20)
  metadata     Json      @default("{}")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("security_scans")
  @@schema("audit")
}

// Add missing relation to fix the error
model Workspace {
  // ... existing fields ...
  searchCache SearchCache[]
  auditLogs   AuditLog[]
}
